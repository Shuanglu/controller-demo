/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/shuanglu/controller-demo/pkg/apis/shuanglu/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ShuangluLister helps list Shuanglus.
// All objects returned here must be treated as read-only.
type ShuangluLister interface {
	// List lists all Shuanglus in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Shuanglu, err error)
	// Shuanglus returns an object that can list and get Shuanglus.
	Shuanglus(namespace string) ShuangluNamespaceLister
	ShuangluListerExpansion
}

// shuangluLister implements the ShuangluLister interface.
type shuangluLister struct {
	indexer cache.Indexer
}

// NewShuangluLister returns a new ShuangluLister.
func NewShuangluLister(indexer cache.Indexer) ShuangluLister {
	return &shuangluLister{indexer: indexer}
}

// List lists all Shuanglus in the indexer.
func (s *shuangluLister) List(selector labels.Selector) (ret []*v1alpha1.Shuanglu, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Shuanglu))
	})
	return ret, err
}

// Shuanglus returns an object that can list and get Shuanglus.
func (s *shuangluLister) Shuanglus(namespace string) ShuangluNamespaceLister {
	return shuangluNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ShuangluNamespaceLister helps list and get Shuanglus.
// All objects returned here must be treated as read-only.
type ShuangluNamespaceLister interface {
	// List lists all Shuanglus in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Shuanglu, err error)
	// Get retrieves the Shuanglu from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Shuanglu, error)
	ShuangluNamespaceListerExpansion
}

// shuangluNamespaceLister implements the ShuangluNamespaceLister
// interface.
type shuangluNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Shuanglus in the indexer for a given namespace.
func (s shuangluNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Shuanglu, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Shuanglu))
	})
	return ret, err
}

// Get retrieves the Shuanglu from the indexer for a given namespace and name.
func (s shuangluNamespaceLister) Get(name string) (*v1alpha1.Shuanglu, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("shuanglu"), name)
	}
	return obj.(*v1alpha1.Shuanglu), nil
}
